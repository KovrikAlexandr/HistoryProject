from aiogram import Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.utils.markdown import hbold, hitalic, hcode
from aiogram.types import Message
from datetime import datetime
import logging
from api import HistDataClient
from enum import IntEnum

class MonthName(IntEnum):
    JANUARY = 1
    FEBRUARY = 2
    MARCH = 3
    APRIL = 4
    MAY = 5
    JUNE = 6
    JULY = 7
    AUGUST = 8
    SEPTEMBER = 9
    OCTOBER = 10
    NOVEMBER = 11
    DECEMBER = 12

    def __str__(self):
        names = {
            1: "—è–Ω–≤–∞—Ä—è",
            2: "—Ñ–µ–≤—Ä–∞–ª—è",
            3: "–º–∞—Ä—Ç–∞",
            4: "–∞–ø—Ä–µ–ª—è",
            5: "–º–∞—è",
            6: "–∏—é–Ω—è",
            7: "–∏—é–ª—è",
            8: "–∞–≤–≥—É—Å—Ç–∞",
            9: "—Å–µ–Ω—Ç—è–±—Ä—è",
            10: "–æ–∫—Ç—è–±—Ä—è",
            11: "–Ω–æ—è–±—Ä—è",
            12: "–¥–µ–∫–∞–±—Ä—è",
        }
        return names[self.value]



router = Router()
data_client = HistDataClient("http://data-api:8000")

@router.message(CommandStart())
async def cmd_start(message: Message):
    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–Ø ‚Äî –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ <b>–í—Ç–æ—Ä–æ–π –ú–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ</b>.\n\n"
        "üìå <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/epics</code> ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ø–∏–∫–æ–≤ (–∫–ª—é—á–µ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤ –≤–æ–π–Ω—ã)\n"
        "‚Ä¢ <code>/getepic &lt;epic_id&gt;</code> ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ø–∏–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/getepic battle_moscow</code>"
    )
    await message.answer(text)



@router.message(Command("epics"))
async def list_epics(message: Message):
    try:
        epics = await data_client.get_all_epics()
        if not epics:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–∞–∫–∏—Ö —ç–ø–∏–∫–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            return

        text = (
            "<b>üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —ç–ø–∏–∫–∏:</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É <code>/getepic &lt;id&gt;</code>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.\n\n"
        )
        text += "\n\n".join(
            f"üîπ <b>{e['title']}</b>\n–¢—ç–≥: <code>{e['epic_id']}</code>" for e in epics
        )
        await message.answer(text)
    except Exception as e:
        logging.error(str(e))
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")



def format_date(date_str: str) -> str:
    try:
        dt = datetime.strptime(date_str, "%Y-%m-%d")
        year = dt.year
        month = dt.month
        day = dt.day

        return f"{day} {str(MonthName(month))} {year}"
    except Exception:
        return date_str



@router.message(Command("getepic"))
async def get_epic(message: Message, command: CommandObject):
    args = command.args
    if not args:
        await message.answer("–£–∫–∞–∂–∏ ID —ç–ø–∏–∫–∞: /getepic <epic_id>")
        return

    epic_id = args.strip()
    try:
        title, description, dependencies, events = await data_client.get_epic_data(epic_id)

        text = f"<b>{title}</b>\n\n{description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"

        if dependencies:
            text += "<b>–ó–∞–≤–∏—Å–∏—Ç –æ—Ç:</b>\n" + "\n\n".join(
                f"‚Ä¢ {dep['title']} (<code>{dep['depends_on_epic_id']}</code>)\n<i>{dep.get('description') or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å–≤—è–∑–∏'}</i>"
                for dep in dependencies
            ) + "\n\n"

        if events:
            text += "<b>–°–æ–±—ã—Ç–∏—è:</b>\n" + "\n".join(
                f"üìÖ {format_date(e['date'])}: {e['text']}" for e in events
            )
        else:
            text += "–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç."

        await message.answer(text)
    except Exception as e:
        logging.error(str(e))
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —ç–ø–∏–∫—É.")
